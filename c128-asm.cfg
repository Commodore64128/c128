#C64
#FEATURES {
#    STARTADDRESS: default = $0801;
#}
#SYMBOLS {
#    __LOADADDR__: type = import;
#}
SYMBOLS {
    __LOADADDR__:  type = import;
    __EXEHDR__:    type = import;
    __STACKSIZE__: type = weak, value = $0800; # 2k stack
}
#C64
#MEMORY {
#    ZP:       file = "", start = $0002,  size = $00FE,      define = yes;
#    LOADADDR: file = %O, start = %S - 2, size = $0002;
#    MAIN:     file = %O, start = %S,     size = $D000 - %S;
#}
MEMORY {
    ZP:       file = "", define = yes, start = $0002, size = $001A;
    LOADADDR: file = %O,               start = $1BFF, size = $0002;
    HEADER:   file = %O,               start = $1C01, size = $000C;
    MAIN:     file = %O, define = yes, start = $1C0D, size = $A3F3 - __STACKSIZE__;
}
#C64
#SEGMENTS {
#    ZEROPAGE: load = ZP,       type = zp,  optional = yes;
#    LOADADDR: load = LOADADDR, type = ro;
#    EXEHDR:   load = MAIN,     type = ro,  optional = yes;
#    CODE:     load = MAIN,     type = rw;
#    RODATA:   load = MAIN,     type = ro,  optional = yes;
#    DATA:     load = MAIN,     type = rw,  optional = yes;
#    BSS:      load = MAIN,     type = bss, optional = yes, define = yes;
#}
SEGMENTS {
    ZEROPAGE: load = ZP,       type = zp;
    LOADADDR: load = LOADADDR, type = ro;
    EXEHDR:   load = HEADER,   type = ro;
    STARTUP:  load = MAIN,     type = ro;
    LOWCODE:  load = MAIN,     type = ro,  optional = yes;
    ONCE:     load = MAIN,     type = ro,  optional = yes;
    CODE:     load = MAIN,     type = ro;
    RODATA:   load = MAIN,     type = ro;
    DATA:     load = MAIN,     type = rw;
    INIT:     load = MAIN,     type = bss;
    BSS:      load = MAIN,     type = bss, define   = yes;
}
